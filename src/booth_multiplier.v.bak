//BOOTH RADIX 2
module BoothMultiplier (
    input [7:0] A, B,
    output reg [15:0] Product
);
    reg [15:0] A_ext;     // Semn-extindere multiplicand
    reg [15:0] P;         // Registru produs
    reg Q_1;              // Bit anterior
    integer i;

    always @(*) begin
        A_ext = {{8{A[7]}}, A};   // Semn-extinde A la 16 bi?i
        P = {8'b0, B};           // Ini?ializare P cu B în partea de jos
        Q_1 = 1'b0;

        for (i = 0; i < 8; i = i + 1) begin
            case ({P[0], Q_1})
                2'b01: P[15:8] = P[15:8] + A_ext;
                2'b10: P[15:8] = P[15:8] - A_ext;
                default: ; // No operation
            endcase

            {P, Q_1} = $signed({P, Q_1}) >>> 1;  // Shift aritmetic
        end

        Product = P;
    end
endmodule